/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface CabinClass<RawValue extends CabinClass.RawValue = CabinClass.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: CabinClass._Visitor<Result>) => Result;
}

const _Economy: CabinClass<"economy"> = {
  value: "economy",
  visit: (visitor) => visitor.economy(),
};
const _Business: CabinClass<"business"> = {
  value: "business",
  visit: (visitor) => visitor.business(),
};
const _First: CabinClass<"first"> = {
  value: "first",
  visit: (visitor) => visitor.first(),
};
export const CabinClass = {
  Economy: _Economy,
  Business: _Business,
  First: _First,
  _parse: (value: string): CabinClass => {
    switch (value) {
      case "economy": {
        return _Economy;
      }
      case "business": {
        return _Business;
      }
      case "first": {
        return _First;
      }
      default: {
        return {
          value: value as CabinClass.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace CabinClass {
  type RawValue = "economy" | "business" | "first";

  interface _Visitor<Result> {
    economy: () => Result;
    business: () => Result;
    first: () => Result;
    _other: (value: string) => Result;
  }
}
