/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { PatchApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment: string;
    auth?: {
      token?: core.Supplier<core.BearerToken>;
    };
  }
}

/**
 * Estimates allow API users to approximate the amount of CO₂ equivalent emitted by certain activities. It can also be used to get a quote for the cost of compensating a certain amount of CO₂ emissions.
 */
export class Client {
  constructor(private readonly options: Client.Options) {}

  public async retrieve(request: PatchApi.estimates.retrieve.Request): Promise<PatchApi.estimates.retrieve.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment, `/estimates/${request.id}`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimates.Estimate.parse(response.body as serializers.estimates.Estimate.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async retrieveList(): Promise<PatchApi.estimates.retrieveList.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment, "/estimates/"),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimates.retrieveList.Response.parse(response.body as serializers.estimates.Estimate.Raw[]),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async createFlightEstimate(
    request: PatchApi.estimates.CreateFlightEstimateRequest
  ): Promise<PatchApi.estimates.createFlightEstimate.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment, "/estimates/flight"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.token)),
      },
      body: serializers.estimates.CreateFlightEstimateRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.estimates.Estimate.parse(response.body as serializers.estimates.Estimate.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
